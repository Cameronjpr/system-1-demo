{"version":3,"sources":["features/toolbar/Toolbar.styled.js","features/window/windowSlice.js","features/toolbar/toolbarSlice.js","features/toolbar/MenuItem.styled.js","features/toolbar/MenuItem.js","features/toolbar/Toolbar.js","features/message/messageSlice.js","features/message/Message.styled.js","features/message/Message.js","features/message/MessageList.styled.js","features/message/MessageList.js","features/message/AddMessage.styled.js","features/message/AddMessage.js","features/message/MessagesContainer.styled.js","features/message/MessagesContainer.js","features/window/Window.styled.js","features/window/Window.js","features/window/WindowController.js","App.js","app/store.js","index.js"],"names":["StyledToolbar","styled","nav","StyledToolbarUl","ul","StyledToolbarItem","li","props","open","windowId","windowSlice","createSlice","name","initialState","id","subheader","reducers","addWindow","state","action","console","log","payload","push","selectWindows","actions","window","toolbarSlice","children","type","toggleItem","map","item","selectItems","toolbar","StyledMenuItem","StyledOption","MenuItem","child","i","key","href","Toolbar","dispatch","useDispatch","items","useSelector","className","onClick","messageSlice","postMessage","reducer","text","selectThread","addConversation","message","StyledMessage","Message","msgRef","useRef","useEffect","current","scrollIntoView","ref","msg","StyledMessageList","MessageList","thread","css","last","length","StyledAddMessageInput","input","StyledAddMessageButton","button","StyledMessageForm","form","AddMessage","useState","setText","onSubmit","e","preventDefault","handleSubmit","aria-label","value","onChange","target","StyledMessagesContainer","div","MessagesContainer","StyledWindow","Window","WindowController","App","style","overflow","configureStore","messageReducer","toolbarReducer","windowReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.0a142e39.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nexport const StyledToolbar = styled.nav`\n  margin: 0;\n  margin-bottom: 1em;\n  background-color: white;\n  color: black;\n  text-align: left;\n  width: 100vw;\n  border-bottom: 2px solid black;\n  line-height: 30px;\n  height: 32px;\n  font-family: Chicago;\n`\n  \n  export const StyledToolbarUl = styled.ul`\n  list-style: none;\n  display: flex;\n  vertical-align: center;\n  height: 30px;\n  margin: 0;\n`\n\nexport const StyledToolbarItem = styled.li`\n  background: white;\n  z-index: 10;\n  line-height: 30px;\n  padding-left: 16px;\n  padding-right: 16px;\n  color: ${props => props.open ? 'white' : 'black'};\n  background: ${props => !props.open ? 'white' : 'black'};\n  &:hover{\n    cursor: pointer;\n  };\n`","import { createSlice } from '@reduxjs/toolkit'\n\nlet windowId=0;\n\nexport const windowSlice = createSlice({\n  name: 'window',\n  initialState: [\n    { id: windowId++, name: \"Messages\", subheader: \"John Appleseed\" }\n  ],\n  reducers: {\n    addWindow(state, action) {\n      console.log(state, action)\n      if (action.payload) state.push({ id: windowId++, name: \"Messages\", subheader: \"John Appleseed\" })\n    }\n  }\n})\n\nexport const { addWindow } = windowSlice.actions\nexport const selectWindows = state => state.window;\n\nexport default windowSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\nimport { addWindow } from '../window/windowSlice'\n\nexport const toolbarSlice = createSlice({\n  name: 'toolbar',\n  initialState: [\n    { id: 0, name: 'File', open: false, children: [{name: 'New Conversation', type: 'ADD_WINDOW'}, {name: 'Open...', type: 'OPEN'}]},\n    { id: 1, name: 'Edit', open: false, children: [{name: 'Cut', type: 'ADD_WINDOW'},{name: 'Copy', type: 'ADD_WINDOW'}, {name: 'Paste', type: 'ADD_WINDOW'}] },\n    { id: 2, name: 'View', open: false, children: [{name: 'Make text bigger', type: 'ADD_WINDOW'},{name: 'Make text smaller', type: 'ADD_WINDOW'}] },\n  ],\n  reducers: {\n    toggleItem(state, action) {\n      state.map(item => \n        item.id === action.payload ? \n        item.open = !item.open : \n        item.open = false   \n      )\n    }\n  }\n})\n\nexport const { toggleItem } = toolbarSlice.actions\nexport const selectItems = state => state.toolbar;\n\nexport default toolbarSlice.reducer","import styled from '@emotion/styled'\n\nexport const StyledMenuItem = styled.ul`\n  background: white;\n  border: 0;\n  display: block;\n  font-size: 32px;\n  font: inherit;\n  list-style: none;\n  position: fixed;\n  padding: 0;\n  margin-left: -16px;\n  border: 2px solid black;\n  color: black;\n`\n\nexport const StyledOption = styled.li`\n  font-family: Chicago;\n  -webkit-appearance: none;\n  padding: 8px;\n  &:hover{\n    cursor: pointer;\n    color: white;\n    background: black;\n  }\n`","import React from 'react';\nimport { StyledMenuItem, StyledOption } from './MenuItem.styled'\n\nexport function MenuItem(props) {\n  return (\n    props.open && (\n    <StyledMenuItem>\n     {props.children.map((child, i) => (\n       <StyledOption key={i} href=\"#\">\n        {child.name}\n      </StyledOption>\n      ))}\n    </StyledMenuItem>\n    )\n  )\n}\n","import React from 'react';\nimport { StyledToolbar, StyledToolbarUl, StyledToolbarItem } from './Toolbar.styled'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { toggleItem } from './toolbarSlice'\nimport { MenuItem} from './MenuItem'\nimport { selectItems } from './toolbarSlice'\n\nexport function Toolbar(props) {\n  const dispatch = useDispatch();\n  const items = useSelector(selectItems)\n\n  const handleClick = (id) => {\n    dispatch(toggleItem(id))\n  }\n\n  return (\n    <StyledToolbar>\n      <StyledToolbarUl>\n        <div className=\"apple-logo\"></div>\n        { items.map((item, i) => (\n          <StyledToolbarItem key={i} onClick={() => handleClick(i)} open={item.open}>\n            {item.name}\n            <MenuItem children={item.children} open={item.open}/>\n          </StyledToolbarItem>\n        ) \n        )}\n      </StyledToolbarUl>\n    </StyledToolbar>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const messageSlice = createSlice({\r\n         name: 'message',\r\n         initialState: [],\r\n         reducers: {\r\n          postMessage: {\r\n            reducer(state, action) {\r\n              state.push({ text: action.payload })\r\n            },\r\n           },\r\n         },\r\n       })\r\n\r\nexport const { postMessage, addConversation } = messageSlice.actions\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.message.value)`\r\nexport const selectThread = state => state.message;\r\n\r\nexport default messageSlice.reducer;\r\n","import styled from '@emotion/styled'\n\nexport const StyledMessage = styled.li`\n  padding: 5px;\n  margin: 0.25em;\n  background-color: white;\n  color: black;\n  text-align: left;\n  overflow:hidden\n`\n","import React, { useRef, useEffect }  from 'react';\r\nimport { StyledMessage } from './Message.styled'\r\n\r\nexport function Message(props) {\r\n  const msgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    msgRef.current.scrollIntoView();\r\n  });\r\n\r\n  return (\r\n    <StyledMessage ref={msgRef}>\r\n      <span>{props.msg.text}</span>\r\n    </StyledMessage>\r\n  )\r\n}\r\n","import styled from '@emotion/styled'\n\nexport const StyledMessageList = styled.ul`\n  padding: 5px;\n  --border-bottom: 1px solid black;\n  border-top: 2px solid black;\n  margin:0;\n  margin-top: 2px;\n  color: black;\n  height: 200px;\n  list-style: none;\n  overflow-y: scroll;\n`","import { css } from 'emotion'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectThread } from './messageSlice'\nimport { Message } from './Message'\nimport { StyledMessageList } from './MessageList.styled'\n\nexport function MessageList(props) {\n  const thread = useSelector(selectThread)\n  return (\n    <StyledMessageList className={css``}>\n      {thread.map((msg, i) => (\n        <Message key={i} msg={msg} last={i === thread.length-1}/>\n      ))}\n    </StyledMessageList>\n  )\n}\n","import styled from '@emotion/styled'\n\nexport const StyledAddMessageInput = styled.input`\n  font: inherit;\n  border: 0px;\n  border-top: 2px solid black;\n  border-right: 2px solid black;\n  width: 100%;\n  --caret-color: transparent;\n  padding-left: 6px;\n  border-image: none;\n  border-color: black;\n  focus: none;\n`\n\nexport const StyledAddMessageButton = styled.button`\n  font: inherit;\n  border: 0px;\n  border-top: 2px solid black;\n  border-color: black\n`\n\nexport const StyledMessageForm=styled.form`\n  font: 32px Chicago;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n`","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { postMessage } from './messageSlice'\nimport {\n  StyledMessageForm,\n  StyledAddMessageInput,\n  StyledAddMessageButton,\n} from './AddMessage.styled'\n\nexport function AddMessage(props) {\n  const dispatch = useDispatch()\n  const [text, setText] = useState(' ')\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    dispatch(postMessage(text) || '')\n    setText('')\n  }\n\n  return (\n    <StyledMessageForm onSubmit={(e) => handleSubmit(e)}>\n      <StyledAddMessageInput\n        aria-label=\"Enter text\"\n        value={text}\n        onChange={(e) => setText(''+e.target.value)}\n      />\n      <StyledAddMessageButton>Send</StyledAddMessageButton>\n    </StyledMessageForm>\n  )\n}\n","import styled from '@emotion/styled'\n\nexport const StyledMessagesContainer = styled.div`\n  margin: auto;\n`","import React from 'react';\nimport { MessageList } from './MessageList'\nimport { AddMessage } from './AddMessage'\nimport { StyledMessagesContainer } from './MessagesContainer.styled'\n\n\nexport function MessagesContainer(props) {\n  return (\n    <StyledMessagesContainer className=\"message-container\">\n        <MessageList/>\n        <AddMessage/>\n    </StyledMessagesContainer>\n  )\n}\n","import styled from '@emotion/styled'\n\nexport const StyledWindow=styled.div`\n  margin: auto;\n  border: 2px solid black;\n  width: 320px;\n  max-height: 320px;\n  background: white;\n  left: 10%;\n`","import React from 'react';\nimport { MessagesContainer } from '../message/MessagesContainer'\nimport { StyledWindow } from './Window.styled'\n\nexport function Window(props) {\n  const { name, subheader } = props.window\n  return (\n    <StyledWindow>\n      <header>\n        <div className=\"background\">\n          <span>{name}</span>\n        </div>\n      </header>\n      <section>{subheader}</section>\n      <main>\n        <MessagesContainer/>\n      </main> \n    </StyledWindow>\n  )\n}\n","import React from 'react';\nimport { Window } from './Window'\nimport { selectWindows } from './windowSlice'\nimport { useSelector} from 'react-redux'\n\nexport function WindowController(props) {\n  const windows = useSelector(selectWindows)\n  return (\n    windows.map((window, i) => (\n      <Window key={i} window={window}/>\n    ))\n  )\n}\n","import React from 'react';\r\nimport { Toolbar } from './features/toolbar/Toolbar'\r\nimport { WindowController } from './features/window/WindowController'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\" style={{overflow: 'hidden'}}>\r\n      <Toolbar/>\r\n      <WindowController/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport messageReducer from '../features/message/messageSlice'\r\nimport toolbarReducer from '../features/toolbar/toolbarSlice'\r\nimport windowReducer from '../features/window/windowSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    message: messageReducer,\r\n    toolbar: toolbarReducer,\r\n    window: windowReducer\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}